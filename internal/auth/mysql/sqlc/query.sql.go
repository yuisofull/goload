// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :execresult
INSERT INTO accounts (account_name)
VALUES (?)
`

func (q *Queries) CreateAccount(ctx context.Context, accountName string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAccount, accountName)
}

const createAccountPassword = `-- name: CreateAccountPassword :exec
INSERT INTO account_passwords (of_account_id, hashed_password)
VALUES (?, ?)
`

type CreateAccountPasswordParams struct {
	OfAccountID    uint64 `json:"of_account_id"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateAccountPassword(ctx context.Context, arg CreateAccountPasswordParams) error {
	_, err := q.db.ExecContext(ctx, createAccountPassword, arg.OfAccountID, arg.HashedPassword)
	return err
}

const getAccountByAccountName = `-- name: GetAccountByAccountName :one
SELECT account_id, account_name
FROM accounts
WHERE account_name = ?
`

func (q *Queries) GetAccountByAccountName(ctx context.Context, accountName string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByAccountName, accountName)
	var i Account
	err := row.Scan(&i.AccountID, &i.AccountName)
	return i, err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT account_id, account_name
FROM accounts
WHERE account_id = ?
`

func (q *Queries) GetAccountByID(ctx context.Context, accountID uint64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByID, accountID)
	var i Account
	err := row.Scan(&i.AccountID, &i.AccountName)
	return i, err
}

const updateAccountPassword = `-- name: UpdateAccountPassword :exec
UPDATE account_passwords
SET hashed_password  = ?
WHERE of_account_id = ?
`

type UpdateAccountPasswordParams struct {
	HashedPassword string `json:"hashed_password"`
	OfAccountID    uint64 `json:"of_account_id"`
}

func (q *Queries) UpdateAccountPassword(ctx context.Context, arg UpdateAccountPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountPassword, arg.HashedPassword, arg.OfAccountID)
	return err
}
