// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createTask = `-- name: CreateTask :execresult
INSERT INTO tasks (of_account_id, name, description, source_url, source_type, source_auth,
                   storage_type, storage_path, status, file_info, progress, options,
                   max_retries,
                   tags, metadata)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateTaskParams struct {
	OfAccountID uint64          `json:"of_account_id"`
	Name        string          `json:"name"`
	Description sql.NullString  `json:"description"`
	SourceUrl   string          `json:"source_url"`
	SourceType  string          `json:"source_type"`
	SourceAuth  json.RawMessage `json:"source_auth"`
	StorageType string          `json:"storage_type"`
	StoragePath string          `json:"storage_path"`
	Status      string          `json:"status"`
	FileInfo    json.RawMessage `json:"file_info"`
	Progress    json.RawMessage `json:"progress"`
	Options     json.RawMessage `json:"options"`
	MaxRetries  int32           `json:"max_retries"`
	Tags        json.RawMessage `json:"tags"`
	Metadata    json.RawMessage `json:"metadata"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTask,
		arg.OfAccountID,
		arg.Name,
		arg.Description,
		arg.SourceUrl,
		arg.SourceType,
		arg.SourceAuth,
		arg.StorageType,
		arg.StoragePath,
		arg.Status,
		arg.FileInfo,
		arg.Progress,
		arg.Options,
		arg.MaxRetries,
		arg.Tags,
		arg.Metadata,
	)
}

const deleteTask = `-- name: DeleteTask :exec
DELETE
FROM tasks
WHERE id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTaskById = `-- name: GetTaskById :one
SELECT id, of_account_id, name, description, source_url, source_type, source_auth, storage_type, storage_path, status, file_info, progress, options, created_at, updated_at, completed_at, error, retry_count, max_retries, tags, metadata
FROM tasks
WHERE id = ?
`

func (q *Queries) GetTaskById(ctx context.Context, id uint64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskById, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.OfAccountID,
		&i.Name,
		&i.Description,
		&i.SourceUrl,
		&i.SourceType,
		&i.SourceAuth,
		&i.StorageType,
		&i.StoragePath,
		&i.Status,
		&i.FileInfo,
		&i.Progress,
		&i.Options,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
		&i.Error,
		&i.RetryCount,
		&i.MaxRetries,
		&i.Tags,
		&i.Metadata,
	)
	return i, err
}

const getTaskCountByAccountId = `-- name: GetTaskCountByAccountId :one
SELECT COUNT(*)
FROM tasks
WHERE of_account_id = ?
`

func (q *Queries) GetTaskCountByAccountId(ctx context.Context, ofAccountID uint64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTaskCountByAccountId, ofAccountID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, of_account_id, name, description, source_url, source_type, source_auth, storage_type, storage_path, status, file_info, progress, options, created_at, updated_at, completed_at, error, retry_count, max_retries, tags, metadata
FROM tasks
WHERE of_account_id = ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListTasksParams struct {
	OfAccountID uint64 `json:"of_account_id"`
	Limit       int32  `json:"limit"`
	Offset      int32  `json:"offset"`
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, arg.OfAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.OfAccountID,
			&i.Name,
			&i.Description,
			&i.SourceUrl,
			&i.SourceType,
			&i.SourceAuth,
			&i.StorageType,
			&i.StoragePath,
			&i.Status,
			&i.FileInfo,
			&i.Progress,
			&i.Options,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompletedAt,
			&i.Error,
			&i.RetryCount,
			&i.MaxRetries,
			&i.Tags,
			&i.Metadata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskCompletedAt = `-- name: UpdateTaskCompletedAt :exec
UPDATE tasks
SET completed_at = ?
WHERE id = ?
`

type UpdateTaskCompletedAtParams struct {
	CompletedAt sql.NullTime `json:"completed_at"`
	ID          uint64       `json:"id"`
}

func (q *Queries) UpdateTaskCompletedAt(ctx context.Context, arg UpdateTaskCompletedAtParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskCompletedAt, arg.CompletedAt, arg.ID)
	return err
}

const updateTaskError = `-- name: UpdateTaskError :exec
UPDATE tasks
SET error = ?
WHERE id = ?
`

type UpdateTaskErrorParams struct {
	Error sql.NullString `json:"error"`
	ID    uint64         `json:"id"`
}

func (q *Queries) UpdateTaskError(ctx context.Context, arg UpdateTaskErrorParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskError, arg.Error, arg.ID)
	return err
}

const updateTaskFileInfo = `-- name: UpdateTaskFileInfo :exec
UPDATE tasks
SET file_info = ?
WHERE id = ?
`

type UpdateTaskFileInfoParams struct {
	FileInfo json.RawMessage `json:"file_info"`
	ID       uint64          `json:"id"`
}

func (q *Queries) UpdateTaskFileInfo(ctx context.Context, arg UpdateTaskFileInfoParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskFileInfo, arg.FileInfo, arg.ID)
	return err
}

const updateTaskProgress = `-- name: UpdateTaskProgress :exec
UPDATE tasks
SET progress = ?
WHERE id = ?
`

type UpdateTaskProgressParams struct {
	Progress json.RawMessage `json:"progress"`
	ID       uint64          `json:"id"`
}

func (q *Queries) UpdateTaskProgress(ctx context.Context, arg UpdateTaskProgressParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskProgress, arg.Progress, arg.ID)
	return err
}

const updateTaskRetryCount = `-- name: UpdateTaskRetryCount :exec
UPDATE tasks
SET retry_count = ?
WHERE id = ?
`

type UpdateTaskRetryCountParams struct {
	RetryCount int32  `json:"retry_count"`
	ID         uint64 `json:"id"`
}

func (q *Queries) UpdateTaskRetryCount(ctx context.Context, arg UpdateTaskRetryCountParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskRetryCount, arg.RetryCount, arg.ID)
	return err
}

const updateTaskStatus = `-- name: UpdateTaskStatus :exec
UPDATE tasks
SET status = ?
WHERE id = ?
`

type UpdateTaskStatusParams struct {
	Status string `json:"status"`
	ID     uint64 `json:"id"`
}

func (q *Queries) UpdateTaskStatus(ctx context.Context, arg UpdateTaskStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskStatus, arg.Status, arg.ID)
	return err
}
