// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createTask = `-- name: CreateTask :execresult
INSERT INTO tasks (of_account_id, file_name, source_url, source_type, source_auth, headers,
                   storage_type, storage_path, status,
                   checksum_type, checksum_value,
                   concurrency, max_speed, max_retries, timeout, metadata)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateTaskParams struct {
	OfAccountID   uint64          `json:"of_account_id"`
	FileName      string          `json:"file_name"`
	SourceUrl     string          `json:"source_url"`
	SourceType    string          `json:"source_type"`
	SourceAuth    json.RawMessage `json:"source_auth"`
	Headers       json.RawMessage `json:"headers"`
	StorageType   string          `json:"storage_type"`
	StoragePath   string          `json:"storage_path"`
	Status        string          `json:"status"`
	ChecksumType  sql.NullString  `json:"checksum_type"`
	ChecksumValue sql.NullString  `json:"checksum_value"`
	Concurrency   sql.NullInt32   `json:"concurrency"`
	MaxSpeed      sql.NullInt64   `json:"max_speed"`
	MaxRetries    int32           `json:"max_retries"`
	Timeout       sql.NullInt32   `json:"timeout"`
	Metadata      json.RawMessage `json:"metadata"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTask,
		arg.OfAccountID,
		arg.FileName,
		arg.SourceUrl,
		arg.SourceType,
		arg.SourceAuth,
		arg.Headers,
		arg.StorageType,
		arg.StoragePath,
		arg.Status,
		arg.ChecksumType,
		arg.ChecksumValue,
		arg.Concurrency,
		arg.MaxSpeed,
		arg.MaxRetries,
		arg.Timeout,
		arg.Metadata,
	)
}

const deleteTask = `-- name: DeleteTask :exec
DELETE
FROM tasks
WHERE id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTaskById = `-- name: GetTaskById :one
SELECT id, of_account_id, file_name, source_url, source_type, headers, source_auth, storage_type, storage_path, checksum_type, checksum_value, concurrency, max_speed, max_retries, timeout, status, progress, downloaded_bytes, total_bytes, error_message, metadata, created_at, updated_at, completed_at
FROM tasks
WHERE id = ?
`

func (q *Queries) GetTaskById(ctx context.Context, id uint64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskById, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.OfAccountID,
		&i.FileName,
		&i.SourceUrl,
		&i.SourceType,
		&i.Headers,
		&i.SourceAuth,
		&i.StorageType,
		&i.StoragePath,
		&i.ChecksumType,
		&i.ChecksumValue,
		&i.Concurrency,
		&i.MaxSpeed,
		&i.MaxRetries,
		&i.Timeout,
		&i.Status,
		&i.Progress,
		&i.DownloadedBytes,
		&i.TotalBytes,
		&i.ErrorMessage,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const getTaskCountByAccountId = `-- name: GetTaskCountByAccountId :one
SELECT COUNT(*)
FROM tasks
WHERE of_account_id = ?
`

func (q *Queries) GetTaskCountByAccountId(ctx context.Context, ofAccountID uint64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTaskCountByAccountId, ofAccountID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, of_account_id, file_name, source_url, source_type, headers, source_auth, storage_type, storage_path, checksum_type, checksum_value, concurrency, max_speed, max_retries, timeout, status, progress, downloaded_bytes, total_bytes, error_message, metadata, created_at, updated_at, completed_at
FROM tasks
WHERE of_account_id = ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListTasksParams struct {
	OfAccountID uint64 `json:"of_account_id"`
	Limit       int32  `json:"limit"`
	Offset      int32  `json:"offset"`
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, arg.OfAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.OfAccountID,
			&i.FileName,
			&i.SourceUrl,
			&i.SourceType,
			&i.Headers,
			&i.SourceAuth,
			&i.StorageType,
			&i.StoragePath,
			&i.ChecksumType,
			&i.ChecksumValue,
			&i.Concurrency,
			&i.MaxSpeed,
			&i.MaxRetries,
			&i.Timeout,
			&i.Status,
			&i.Progress,
			&i.DownloadedBytes,
			&i.TotalBytes,
			&i.ErrorMessage,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFileChecksum = `-- name: UpdateFileChecksum :exec
UPDATE tasks
SET checksum_type = ?, checksum_value = ?
WHERE id = ?
`

type UpdateFileChecksumParams struct {
	ChecksumType  sql.NullString `json:"checksum_type"`
	ChecksumValue sql.NullString `json:"checksum_value"`
	ID            uint64         `json:"id"`
}

func (q *Queries) UpdateFileChecksum(ctx context.Context, arg UpdateFileChecksumParams) error {
	_, err := q.db.ExecContext(ctx, updateFileChecksum, arg.ChecksumType, arg.ChecksumValue, arg.ID)
	return err
}

const updateTaskCompletedAt = `-- name: UpdateTaskCompletedAt :exec
UPDATE tasks
SET completed_at = ?
WHERE id = ?
`

type UpdateTaskCompletedAtParams struct {
	CompletedAt sql.NullTime `json:"completed_at"`
	ID          uint64       `json:"id"`
}

func (q *Queries) UpdateTaskCompletedAt(ctx context.Context, arg UpdateTaskCompletedAtParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskCompletedAt, arg.CompletedAt, arg.ID)
	return err
}

const updateTaskDownloadedBytes = `-- name: UpdateTaskDownloadedBytes :exec
UPDATE tasks
SET downloaded_bytes = ?
WHERE id = ?
`

type UpdateTaskDownloadedBytesParams struct {
	DownloadedBytes sql.NullInt64 `json:"downloaded_bytes"`
	ID              uint64        `json:"id"`
}

func (q *Queries) UpdateTaskDownloadedBytes(ctx context.Context, arg UpdateTaskDownloadedBytesParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskDownloadedBytes, arg.DownloadedBytes, arg.ID)
	return err
}

const updateTaskError = `-- name: UpdateTaskError :exec
UPDATE tasks
SET error_message = ?
WHERE id = ?
`

type UpdateTaskErrorParams struct {
	ErrorMessage sql.NullString `json:"error_message"`
	ID           uint64         `json:"id"`
}

func (q *Queries) UpdateTaskError(ctx context.Context, arg UpdateTaskErrorParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskError, arg.ErrorMessage, arg.ID)
	return err
}

const updateTaskMetadata = `-- name: UpdateTaskMetadata :exec
UPDATE tasks
SET metadata = ?
WHERE id = ?
`

type UpdateTaskMetadataParams struct {
	Metadata json.RawMessage `json:"metadata"`
	ID       uint64          `json:"id"`
}

func (q *Queries) UpdateTaskMetadata(ctx context.Context, arg UpdateTaskMetadataParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskMetadata, arg.Metadata, arg.ID)
	return err
}

const updateTaskProgress = `-- name: UpdateTaskProgress :exec
UPDATE tasks
SET progress = ?
WHERE id = ?
`

type UpdateTaskProgressParams struct {
	Progress sql.NullFloat64 `json:"progress"`
	ID       uint64          `json:"id"`
}

func (q *Queries) UpdateTaskProgress(ctx context.Context, arg UpdateTaskProgressParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskProgress, arg.Progress, arg.ID)
	return err
}

const updateTaskStatus = `-- name: UpdateTaskStatus :exec
UPDATE tasks
SET status = ?
WHERE id = ?
`

type UpdateTaskStatusParams struct {
	Status string `json:"status"`
	ID     uint64 `json:"id"`
}

func (q *Queries) UpdateTaskStatus(ctx context.Context, arg UpdateTaskStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskStatus, arg.Status, arg.ID)
	return err
}

const updateTaskTotalBytes = `-- name: UpdateTaskTotalBytes :exec
UPDATE tasks
SET total_bytes = ?
WHERE id = ?
`

type UpdateTaskTotalBytesParams struct {
	TotalBytes sql.NullInt64 `json:"total_bytes"`
	ID         uint64        `json:"id"`
}

func (q *Queries) UpdateTaskTotalBytes(ctx context.Context, arg UpdateTaskTotalBytesParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskTotalBytes, arg.TotalBytes, arg.ID)
	return err
}
