// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: download_task.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DownloadTaskService_CreateDownloadTask_FullMethodName  = "/downloadtask.v1.DownloadTaskService/CreateDownloadTask"
	DownloadTaskService_GetDownloadTaskList_FullMethodName = "/downloadtask.v1.DownloadTaskService/GetDownloadTaskList"
	DownloadTaskService_UpdateDownloadTask_FullMethodName  = "/downloadtask.v1.DownloadTaskService/UpdateDownloadTask"
	DownloadTaskService_DeleteDownloadTask_FullMethodName  = "/downloadtask.v1.DownloadTaskService/DeleteDownloadTask"
)

// DownloadTaskServiceClient is the client API for DownloadTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ===== Download Task Service =====
type DownloadTaskServiceClient interface {
	CreateDownloadTask(ctx context.Context, in *CreateDownloadTaskRequest, opts ...grpc.CallOption) (*CreateDownloadTaskResponse, error)
	GetDownloadTaskList(ctx context.Context, in *GetDownloadTaskListRequest, opts ...grpc.CallOption) (*GetDownloadTaskListResponse, error)
	UpdateDownloadTask(ctx context.Context, in *UpdateDownloadTaskRequest, opts ...grpc.CallOption) (*UpdateDownloadTaskResponse, error)
	DeleteDownloadTask(ctx context.Context, in *DeleteDownloadTaskRequest, opts ...grpc.CallOption) (*DeleteDownloadTaskResponse, error)
}

type downloadTaskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDownloadTaskServiceClient(cc grpc.ClientConnInterface) DownloadTaskServiceClient {
	return &downloadTaskServiceClient{cc}
}

func (c *downloadTaskServiceClient) CreateDownloadTask(ctx context.Context, in *CreateDownloadTaskRequest, opts ...grpc.CallOption) (*CreateDownloadTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDownloadTaskResponse)
	err := c.cc.Invoke(ctx, DownloadTaskService_CreateDownloadTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadTaskServiceClient) GetDownloadTaskList(ctx context.Context, in *GetDownloadTaskListRequest, opts ...grpc.CallOption) (*GetDownloadTaskListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDownloadTaskListResponse)
	err := c.cc.Invoke(ctx, DownloadTaskService_GetDownloadTaskList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadTaskServiceClient) UpdateDownloadTask(ctx context.Context, in *UpdateDownloadTaskRequest, opts ...grpc.CallOption) (*UpdateDownloadTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDownloadTaskResponse)
	err := c.cc.Invoke(ctx, DownloadTaskService_UpdateDownloadTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadTaskServiceClient) DeleteDownloadTask(ctx context.Context, in *DeleteDownloadTaskRequest, opts ...grpc.CallOption) (*DeleteDownloadTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDownloadTaskResponse)
	err := c.cc.Invoke(ctx, DownloadTaskService_DeleteDownloadTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DownloadTaskServiceServer is the server API for DownloadTaskService service.
// All implementations must embed UnimplementedDownloadTaskServiceServer
// for forward compatibility.
//
// ===== Download Task Service =====
type DownloadTaskServiceServer interface {
	CreateDownloadTask(context.Context, *CreateDownloadTaskRequest) (*CreateDownloadTaskResponse, error)
	GetDownloadTaskList(context.Context, *GetDownloadTaskListRequest) (*GetDownloadTaskListResponse, error)
	UpdateDownloadTask(context.Context, *UpdateDownloadTaskRequest) (*UpdateDownloadTaskResponse, error)
	DeleteDownloadTask(context.Context, *DeleteDownloadTaskRequest) (*DeleteDownloadTaskResponse, error)
	mustEmbedUnimplementedDownloadTaskServiceServer()
}

// UnimplementedDownloadTaskServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDownloadTaskServiceServer struct{}

func (UnimplementedDownloadTaskServiceServer) CreateDownloadTask(context.Context, *CreateDownloadTaskRequest) (*CreateDownloadTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDownloadTask not implemented")
}
func (UnimplementedDownloadTaskServiceServer) GetDownloadTaskList(context.Context, *GetDownloadTaskListRequest) (*GetDownloadTaskListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadTaskList not implemented")
}
func (UnimplementedDownloadTaskServiceServer) UpdateDownloadTask(context.Context, *UpdateDownloadTaskRequest) (*UpdateDownloadTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDownloadTask not implemented")
}
func (UnimplementedDownloadTaskServiceServer) DeleteDownloadTask(context.Context, *DeleteDownloadTaskRequest) (*DeleteDownloadTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDownloadTask not implemented")
}
func (UnimplementedDownloadTaskServiceServer) mustEmbedUnimplementedDownloadTaskServiceServer() {}
func (UnimplementedDownloadTaskServiceServer) testEmbeddedByValue()                             {}

// UnsafeDownloadTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DownloadTaskServiceServer will
// result in compilation errors.
type UnsafeDownloadTaskServiceServer interface {
	mustEmbedUnimplementedDownloadTaskServiceServer()
}

func RegisterDownloadTaskServiceServer(s grpc.ServiceRegistrar, srv DownloadTaskServiceServer) {
	// If the following call pancis, it indicates UnimplementedDownloadTaskServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DownloadTaskService_ServiceDesc, srv)
}

func _DownloadTaskService_CreateDownloadTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDownloadTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadTaskServiceServer).CreateDownloadTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadTaskService_CreateDownloadTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadTaskServiceServer).CreateDownloadTask(ctx, req.(*CreateDownloadTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DownloadTaskService_GetDownloadTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDownloadTaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadTaskServiceServer).GetDownloadTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadTaskService_GetDownloadTaskList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadTaskServiceServer).GetDownloadTaskList(ctx, req.(*GetDownloadTaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DownloadTaskService_UpdateDownloadTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDownloadTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadTaskServiceServer).UpdateDownloadTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadTaskService_UpdateDownloadTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadTaskServiceServer).UpdateDownloadTask(ctx, req.(*UpdateDownloadTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DownloadTaskService_DeleteDownloadTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDownloadTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadTaskServiceServer).DeleteDownloadTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadTaskService_DeleteDownloadTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadTaskServiceServer).DeleteDownloadTask(ctx, req.(*DeleteDownloadTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DownloadTaskService_ServiceDesc is the grpc.ServiceDesc for DownloadTaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DownloadTaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "downloadtask.v1.DownloadTaskService",
	HandlerType: (*DownloadTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDownloadTask",
			Handler:    _DownloadTaskService_CreateDownloadTask_Handler,
		},
		{
			MethodName: "GetDownloadTaskList",
			Handler:    _DownloadTaskService_GetDownloadTaskList_Handler,
		},
		{
			MethodName: "UpdateDownloadTask",
			Handler:    _DownloadTaskService_UpdateDownloadTask_Handler,
		},
		{
			MethodName: "DeleteDownloadTask",
			Handler:    _DownloadTaskService_DeleteDownloadTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "download_task.proto",
}
